{"version":3,"sources":["_header.js","_saa_map.js"],"names":[],"mappingstRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Constants\nvar ONE_THIRD = 1/3;\nvar TWO_THIRD = 2/3;\nvar TWO_PI = 2*Math.PI;\nvar triAngles = [\n    0,\n    ONE_THIRD*TWO_PI,\n    TWO_THIRD*TWO_PI\n]\n\n// Settings\nvar colors = [[241,118,76], [232,88,59]];\nvar triWidth = 100;\n//var imageSrcLarge = \"/images/header_wide.svg\";\n\nvar friction = 0.9;\nvar maxV = 100;\n\n// Canvas vars\nvar elCanvas = document.querySelector('canvas');\nvar elContainer = document.querySelector('[data-header]');\nvar context = elCanvas.getContext('2d');\n\nvar imageSrcSmall = elContainer.dataset.header;\nvar imageSrcLarge = imageSrcSmall;\n\n\nvar pixelRatio = window.devicePixelRatio || 1;\n\n// May need to do this for performance reasons\n//var pixelRatio = Math.min(window.devicePixelRatio || 1, 1.5);\n\n// Triangle grid\nvar triHeight = triWidth * (Math.sqrt(3)/2);\nvar triCols, triRows, triCount, gridSize;\nvar globalAngle = 0;\n\n// Header Image\nvar headerImage = new Image();\nvar imageRatio;\nvar imageLoaded = false;\nvar usingImage;\n\n// Mouse vars\nvar moveX = 0;\nvar moveY = 0;\nvar lastX = 0;\nvar lastY = 0;\nvar mouseLastMoved;\n\nvar vx = 0;\nvar vy = 0;\n\nvar resize = function() {\n\n    // Canvas sizing stuff\n    width = Math.floor(elCanvas.width = elContainer.offsetWidth * pixelRatio);\n    height = Math.floor(elCanvas.height = (width/pixelRatio)*imageRatio * pixelRatio);\n    cx = width/2;\n    cy = height/2;\n\n    context.scale(pixelRatio,pixelRatio);\n\n    elCanvas.style.width = Math.floor(width/pixelRatio)+\"px\";\n    elCanvas.style.height = Math.floor(height/pixelRatio)+\"px\";\n\n    // Triangle grid\n    triCols = Math.ceil(width/triWidth);\n    triRows = Math.ceil(height/triWidth);\n\n    if (triCols > triRows) {\n        triCount = triCols*1.5; \n    } else {\n        triCount = triRows*1.5;       \n    }\n\n    gridSize = triCount * triWidth;\n\n    context.translate(Math.floor(width/2), Math.floor(height/2));\n\n    checkScreenWidth();\n\n}\n\nvar checkScreenWidth = function() {\n\n    if (Modernizr.mq('(max-width: 600px)') && usingImage != 'small') {\n\n        headerImage.src = imageSrcSmall\n        usingImage = 'small';\n\n    } else if (Modernizr.mq('(min-width: 600px)') && usingImage != 'large') {\n        headerImage.src = imageSrcLarge;\n        usingImage = 'large';\n    }    \n   \n}\n\n// Generates triangle at any position/rotation/color\nvar triangle = function(r, color, angle, x, y) {\n\n    var angleX, angleY;\n\n    // Rotation\n    angle = angle + ONE_THIRD*Math.PI/2;\n\n    context.beginPath();\n     context.fillStyle = 'rgba('+color[0]+','+color[1]+','+color[2]+','+1+')';\n    \n    // Triangle points calculated using third angles on a circle\n    for (var i=0; i < triAngles.length; i++) {\n\n        angleX = r*Math.cos(triAngles[i] + angle) + x;\n        angleY = r*Math.sin(triAngles[i] + angle) + y;\n\n        if (i == 0) {\n           context.moveTo(angleX,angleY); \n        } else {\n            context.lineTo(angleX,angleY); \n        } \n\n    }\n\n    context.fill();\n    context.closePath();\n\n}\n\nvar handleMouseMove = function(e) {\n\n    if (!mouseLastMoved) {\n        mouseLastMoved = Date.now();\n    }\n\n    // if (!mouseMoving) {\n    //     moveXStart = e.clientX;\n    //     moveYStart = e.clientY;\n    //     mouseMoving = true;\n    // }\n\n    // If last mouse recorded 10th of a second ago\n    if (mouseLastMoved < Date.now() - 50) {\n        // Get speed of mouse\n        vx = e.clientX - lastX;\n        vy = e.clientY - lastY;\n\n        // Update new values of mouse to check next time\n        lastX = e.clientX;\n        lastY = e.clientY;\n        mouseLastMoved = Date.now();\n\n    }\n\n   \n    \n}\n\nvar draw = function() {\n\n    // Don't draw unless image loaded\n    if (!imageLoaded) { return };\n\n    // Background color in case holes peep throuhg\n   context.globalCompositeOperation = 'normal';\n    var color = colors[0];\n    context.fillStyle = 'rgb('+color[0]+','+color[1]+','+color[2]+')';\n    context.rect(-gridSize/2,-gridSize/2,gridSize,gridSize);\n    context.fill();\n\n    context.save();\n\n    var color = colors[1];\n     context.fillStyle = 'rgba('+color[0]+','+color[1]+','+color[2]+','+1+')';\n    \n    // Iterate triangle Rows\n    for (var j = 0; j < triCount; j++) {\n\n        // Alternate offset of each row\n        var bool = j % 2;\n        var xOffset = triWidth - (2*triWidth*bool);\n        context.translate(xOffset,triHeight);\n        \n        // Adjust x position with mouse X, alternate +/- on row\n        var posX = (moveX - (2*moveX*bool))/10;\n        \n        // Alternate the blend mode for each row;\n        if (bool) {\n            context.globalCompositeOperation = 'difference';\n        } else {\n            context.globalCompositeOperation = 'screen';\n        }\n\n        for (var i = 0; i < triCount; i++ ) {\n\n            // Adjust y position with mouse y, alternate +/- on rcolow\n            var bool = i % 2;\n            var posY = (moveY - (2*moveY*bool))/10  - (gridSize/2);\n\n            // Draw triangle, alternate up/down rotation while adding the global rotation\n            triangle(triWidth, colors[bool], (Math.PI*bool)+globalAngle, (i*triWidth)+posX - (gridSize/2), posY);\n\n        }\n    }   \n\n    globalAngle+=0.003;\n\n    // Apply masked text image\n    context.globalCompositeOperation = 'destination-in';\n    context.setTransform(1,0,0,1,0,0);\n    context.drawImage(headerImage,0,0, width, width*imageRatio);\n    \n    context.restore();\n\n   \n};\n\n\nvar handlePhysics = function() {\n\n    if (vx > maxV) {\n        vx = maxV;\n    } else if (vx < -maxV) {\n        vx = -maxV;\n    }\n\n    if (vy > maxV) {\n        vy = maxV;\n    } else if (vy < -maxV) {\n        vy = -maxV;\n    }\n \n\n    vx = vx*friction;\n    vy = vy*friction;\n\n    moveX += vx;\n    moveY += vy;\n}\n\n\nheaderImage.onload = function() {\n    \n    imageLoaded = true;\n    imageRatio = this.height/this.width;\n\n    resize();\n\n}\n\n\ncheckScreenWidth();\nwindow.addEventListener('mousemove', handleMouseMove);\nwindow.addEventListener('resize', resize);\n\nwindow.addEventListener('devicemotion', function(e) {\n\n  ax = e.acceleration.x;\n  ay = e.acceleration.y;\n  az = e.acceleration.z;\n\n  if (ax > 0.5 || ax < -0.5) {\n    vx = ax * 10;\n  }\n\n  if (ay > 0.5 || ay < -0.5) {\n    vy = ay * 10;\n  }\n\n  if (az > 0.5 || az < -0.5) {\n    vy = az * 10;\n  }\n  \n});\n\nrequestAnimationFrame(function animLoop(){\n handlePhysics();  \n draw();\n requestAnimationFrame( animLoop );\n});","var pathEls = document.querySelectorAll('svg #flights path');\nvar paths = [];\nvar transEndEventName = ('WebkitTransition' in document.documentElement.style) ? 'webkitTransitionEnd' : 'transitionend';\n\n// Each path on the map\nvar Path = function(path, index) {\n\n\tvar self = this;\n\n\tthis.init = function() {\n\n\t\tthis.length = path.getTotalLength();\n\t\tthis.index = index;\n\t\tthis.reset();\n\n\t}\n\n\tthis.go = function() {\n\t\tthis.reset();\n\t\tpath.style.strokeDashoffset = self.length;\n\t}\n\n\tthis.reset = function() {\n\n\t\t// Clear any previous transition\n\t\tpath.style.transition = path.style.WebkitTransition = 'none';\n\t\t\n\t\t// Set up the starting positions\n\t\tpath.style.strokeDasharray = this.length + ' ' + this.length;\n\t\tpath.style.strokeDashoffset = -this.length;\n\t\t\n\t\t// Trigger a layout so styles are calculated & the browser\n\t\t// picks up the starting position before animating\n\t\tpath.getBoundingClientRect();\n\t\t// Define our transition\n\t\tpath.style.transition = path.style.WebkitTransition = 'stroke-dashoffset 1s ease-in-out';\n\n\t}\n \n}\n\n// Create new objects for each path tag in the svg\nfor (var i=0; i<pathEls.length; i++) {\n\n\tvar path = new Path(pathEls[i]);\n\tpath.init();\n\n\tpaths.push(path);\n\n}\n\n// 3 counting vars, offset by 3\n// Allowing for 3 paths to be animated at a time\nvar i = paths.length-1;\nvar j = paths.length-3;\nvar k = paths.length-5;\n\n// Set off animations every second\nvar t = window.setInterval(function() {\n\t\n\tpaths[i].go();\n\tpaths[j].go();\n\tpaths[k].go();\n\n\ti--; j--; k--;\n\n\tif (i < 0) {\n\t\ti = paths.length-1;\n\t}\n\n\tif (j < 0) {\n\t\tj = paths.length-1;\n\t}\n\n\tif (k < 0) {\n\t\tk = paths.length-1;\n\t}\n\n}, 1000)\n\n\n"],"sourceRoot":"/source/"}